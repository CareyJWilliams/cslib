*label entry
*params module log_buffer
*temp test_count 0
*temp tests_passed 0


*comment :::::: MAX tests ::::::
*gosub test_start "ASSERT numbers not zero #1"
*gosub_scene cslib_assert number_not_zero 1
*gosub_scene cslib_assert numbers_not_zero 1 2 1
*gosub test_finish true true


*set cslib_ret "${tests_passed}|${test_count}"
*return


*comment :::::: UTILITY routines ::::::
*label test_start
*params p_test_name
*set test_count + 1
*set {log_buffer} &"TEST ${p_test_name}: "
*return

*label test_finish
*params p_result_expected p_result_actual
*temp result (p_result_expected = p_result_actual)
*set {log_buffer} &"@{result PASS|FAIL}[n/]"
*if result
	*set tests_passed + 1
*else
	*set {log_buffer} &"=> Expected - ${p_result_expected}[n/]"
	*set {log_buffer} &"=> Received - ${p_result_actual}[n/]"
*return